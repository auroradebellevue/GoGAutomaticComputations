gap> F:=FreeGroup("a", "b", "c");
<free group on the generators [ a, b, c ]>
gap> a:=F.1;; b:=F.2;; c:=F.3;;
gap> Gv:=F/[a*b*a=b*a*b, a*c*a=c*a*c, b*c*b=c*b*c];
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `/' on 2 arguments at /home/aurora/gap-4.11.1/lib/methsel2.g:249 called from
<function "HANDLE_METHOD_NOT_FOUND">( <arguments> )
 called from read-eval loop at *stdin*:11
type 'quit;' to quit to outer loop
brk> quit;
gap> G:= F/[a*b*a*b^-1*a^-1*b^-1, a*c*a*c^-1*a^-1*c^-1, b*c*b*c^-1*b^-1*c^-1];
<fp group on the generators [ a, b, c ]>
gap> G:= F/[a*b*a*b^-1*a^-1*b^-1, a*c*a*c^-1*a^-1*c^-1, b*c*b*c^-1*b^-1*c^-1];
<fp group on the generators [ a, b, c ]>
gap> R:=KBMAGRewritingSystem(G);
rec(
           isRWS := true,
          silent := true,
  generatorOrder := [_g1,_g2,_g3,_g4,_g5,_g6],
        inverses := [_g2,_g1,_g4,_g3,_g6,_g5],
        ordering := "shortlex",
       equations := [
         [_g1*_g3*_g1,_g3*_g1*_g3],
         [_g1*_g5*_g1,_g5*_g1*_g5],
         [_g3*_g5*_g3,_g5*_g3*_g5]
       ]
)

gap> S:=SubgroupOfKBMAGRewritingSystem(R, [a,b]);
rec(
           isRWS := true,
          silent := true,
  generatorOrder := [_x1,_X1,_x2,_X2],
        inverses := [_X1,_x1,_X2,_x2],
        ordering := "shortlex",
       equations := [
       ]
)

gap> AutomaticStructureOnCosets(R,S);
true
gap> AutomaticStructure(R);
true
gap> W:=WordAcceptor(R);
rec( accepting := [ 1 .. 131 ], 
  alphabet := 
    rec( format := "dense", names := [ _g1, _g2, _g3, _g4, _g5, _g6 ], 
      printingFormat := "dense", 
      printingStrings := [ "_g1", "_g2", "_g3", "_g4", "_g5", "_g6" ], 
      size := 6, type := "identifiers" ), 
  denseDTable := [ [ 2, 3, 4, 5, 6, 7 ], [ 2, 0, 4, 5, 6, 7 ], 
      [ 0, 3, 4, 5, 6, 7 ], [ 8, 9, 4, 0, 6, 7 ], [ 10, 11, 0, 5, 6, 7 ], 
      [ 12, 13, 14, 15, 6, 0 ], [ 16, 17, 18, 19, 0, 7 ], 
      [ 20, 0, 0, 0, 6, 7 ], [ 0, 9, 4, 0, 6, 7 ], [ 10, 0, 0, 5, 6, 7 ], 
      [ 0, 21, 0, 0, 6, 7 ], [ 22, 0, 23, 24, 0, 0 ], [ 0, 13, 25, 26, 6, 0 ],
      [ 27, 28, 29, 0, 0, 0 ], [ 30, 31, 0, 15, 6, 0 ], 
      [ 16, 0, 32, 33, 0, 7 ], [ 0, 34, 23, 24, 0, 0 ], 
      [ 35, 36, 18, 0, 0, 7 ], [ 37, 38, 0, 39, 0, 0 ], 
      [ 20, 0, 40, 0, 6, 7 ], [ 0, 21, 0, 41, 6, 7 ], 
      [ 22, 0, 25, 26, 42, 0 ], [ 8, 9, 43, 0, 44, 45 ], 
      [ 10, 11, 0, 46, 47, 48 ], [ 8, 9, 49, 0, 50, 45 ], 
      [ 10, 11, 0, 26, 6, 51 ], [ 52, 0, 0, 0, 42, 53 ], 
      [ 0, 54, 4, 0, 55, 56 ], [ 57, 58, 29, 0, 44, 0 ], 
      [ 59, 0, 0, 5, 60, 53 ], [ 0, 61, 0, 0, 6, 62 ], [ 8, 9, 32, 0, 63, 7 ],
      [ 10, 11, 0, 64, 47, 65 ], [ 0, 34, 32, 33, 0, 56 ], 
      [ 66, 0, 0, 0, 67, 7 ], [ 0, 68, 4, 0, 55, 69 ], 
      [ 70, 0, 0, 5, 42, 53 ], [ 0, 71, 0, 0, 55, 56 ], 
      [ 72, 73, 0, 39, 0, 48 ], [ 0, 0, 74, 0, 6, 7 ], [ 0, 0, 0, 75, 6, 7 ], 
      [ 0, 0, 14, 15, 60, 0 ], [ 8, 9, 43, 0, 63, 45 ], 
      [ 76, 77, 0, 0, 50, 0 ], [ 78, 79, 80, 0, 0, 45 ], 
      [ 10, 11, 0, 46, 47, 51 ], [ 81, 82, 0, 83, 47, 0 ], 
      [ 84, 85, 0, 0, 0, 65 ], [ 8, 9, 49, 0, 6, 45 ], 
      [ 86, 87, 14, 0, 50, 0 ], [ 78, 79, 18, 0, 0, 7 ], 
      [ 52, 0, 40, 0, 67, 53 ], [ 88, 0, 18, 19, 0, 53 ], 
      [ 0, 54, 4, 0, 55, 62 ], [ 0, 89, 14, 15, 55, 0 ], 
      [ 0, 0, 18, 19, 0, 69 ], [ 90, 0, 0, 0, 60, 53 ], 
      [ 0, 58, 4, 0, 6, 62 ], [ 59, 0, 0, 5, 6, 53 ], 
      [ 12, 0, 14, 15, 60, 0 ], [ 0, 61, 0, 41, 6, 62 ], 
      [ 16, 0, 18, 19, 0, 7 ], [ 81, 82, 0, 15, 6, 0 ], 
      [ 10, 11, 0, 64, 47, 7 ], [ 91, 92, 0, 19, 0, 65 ], 
      [ 66, 0, 40, 0, 67, 7 ], [ 0, 13, 14, 15, 6, 0 ], 
      [ 0, 68, 4, 0, 55, 7 ], [ 0, 17, 18, 19, 0, 69 ], 
      [ 70, 0, 0, 5, 67, 53 ], [ 0, 71, 0, 41, 55, 62 ], 
      [ 72, 0, 0, 5, 67, 7 ], [ 0, 93, 0, 0, 55, 69 ], [ 8, 0, 74, 0, 6, 7 ], 
      [ 0, 11, 0, 75, 6, 7 ], [ 94, 0, 95, 96, 0, 0 ], 
      [ 0, 97, 98, 99, 6, 0 ], [ 100, 0, 101, 102, 0, 7 ], 
      [ 0, 103, 23, 104, 0, 0 ], [ 35, 36, 80, 0, 0, 45 ], 
      [ 105, 0, 106, 24, 0, 0 ], [ 0, 107, 98, 108, 6, 0 ], 
      [ 30, 31, 0, 83, 47, 0 ], [ 109, 0, 110, 102, 0, 7 ], 
      [ 0, 111, 112, 113, 0, 0 ], [ 114, 0, 115, 96, 0, 0 ], 
      [ 0, 87, 25, 116, 6, 0 ], [ 88, 0, 32, 33, 0, 53 ], 
      [ 0, 89, 25, 26, 55, 0 ], [ 90, 0, 40, 0, 6, 53 ], 
      [ 91, 0, 117, 33, 0, 7 ], [ 0, 118, 112, 119, 0, 0 ], 
      [ 0, 93, 0, 41, 55, 7 ], [ 94, 0, 120, 121, 42, 0 ], 
      [ 0, 0, 122, 0, 44, 45 ], [ 123, 0, 0, 124, 47, 48 ], 
      [ 0, 97, 98, 116, 6, 0 ], [ 0, 125, 126, 0, 50, 45 ], 
      [ 0, 0, 0, 108, 6, 51 ], [ 100, 0, 32, 102, 0, 7 ], 
      [ 8, 0, 101, 0, 63, 7 ], [ 123, 0, 0, 127, 47, 65 ], 
      [ 0, 103, 32, 128, 0, 56 ], [ 10, 0, 0, 46, 47, 48 ], 
      [ 105, 0, 120, 26, 42, 0 ], [ 0, 9, 43, 0, 44, 45 ], 
      [ 0, 107, 98, 26, 6, 0 ], [ 0, 11, 0, 108, 6, 51 ], 
      [ 109, 0, 117, 102, 0, 7 ], [ 0, 0, 101, 0, 63, 7 ], 
      [ 0, 111, 129, 128, 0, 56 ], [ 0, 125, 130, 0, 44, 45 ], 
      [ 0, 0, 0, 131, 47, 48 ], [ 114, 0, 25, 121, 42, 0 ], 
      [ 8, 0, 122, 0, 44, 45 ], [ 10, 0, 0, 26, 6, 51 ], 
      [ 0, 9, 32, 0, 63, 7 ], [ 0, 118, 129, 33, 0, 56 ], 
      [ 0, 11, 0, 131, 47, 48 ], [ 0, 9, 49, 0, 50, 45 ], 
      [ 123, 0, 0, 121, 6, 51 ], [ 8, 0, 122, 0, 63, 45 ], 
      [ 123, 0, 0, 123, 6, 7 ], [ 123, 0, 0, 124, 47, 51 ], 
      [ 0, 125, 125, 0, 6, 7 ], [ 0, 125, 126, 0, 6, 45 ], 
      [ 123, 0, 0, 127, 47, 7 ], [ 10, 0, 0, 64, 47, 65 ], 
      [ 0, 125, 129, 0, 63, 7 ], [ 0, 125, 130, 0, 63, 45 ], 
      [ 0, 11, 0, 131, 47, 51 ] ], 
  flags := [ "BFS", "DFA", "accessible", "minimized", "trim" ], 
  initial := [ 1 ], isFSA := true, isInitializedFSA := true, 
  states := rec( size := 131, type := "simple" ), 
  table := rec( format := "dense deterministic", numTransitions := 514, 
      printingFormat := "dense deterministic", 
      transitions := [ [ 2, 3, 4, 5, 6, 7 ], [ 2, 0, 4, 5, 6, 7 ], 
          [ 0, 3, 4, 5, 6, 7 ], [ 8, 9, 4, 0, 6, 7 ], [ 10, 11, 0, 5, 6, 7 ], 
          [ 12, 13, 14, 15, 6, 0 ], [ 16, 17, 18, 19, 0, 7 ], 
          [ 20, 0, 0, 0, 6, 7 ], [ 0, 9, 4, 0, 6, 7 ], [ 10, 0, 0, 5, 6, 7 ], 
          [ 0, 21, 0, 0, 6, 7 ], [ 22, 0, 23, 24, 0, 0 ], 
          [ 0, 13, 25, 26, 6, 0 ], [ 27, 28, 29, 0, 0, 0 ], 
          [ 30, 31, 0, 15, 6, 0 ], [ 16, 0, 32, 33, 0, 7 ], 
          [ 0, 34, 23, 24, 0, 0 ], [ 35, 36, 18, 0, 0, 7 ], 
          [ 37, 38, 0, 39, 0, 0 ], [ 20, 0, 40, 0, 6, 7 ], 
          [ 0, 21, 0, 41, 6, 7 ], [ 22, 0, 25, 26, 42, 0 ], 
          [ 8, 9, 43, 0, 44, 45 ], [ 10, 11, 0, 46, 47, 48 ], 
          [ 8, 9, 49, 0, 50, 45 ], [ 10, 11, 0, 26, 6, 51 ], 
          [ 52, 0, 0, 0, 42, 53 ], [ 0, 54, 4, 0, 55, 56 ], 
          [ 57, 58, 29, 0, 44, 0 ], [ 59, 0, 0, 5, 60, 53 ], 
          [ 0, 61, 0, 0, 6, 62 ], [ 8, 9, 32, 0, 63, 7 ], 
          [ 10, 11, 0, 64, 47, 65 ], [ 0, 34, 32, 33, 0, 56 ], 
          [ 66, 0, 0, 0, 67, 7 ], [ 0, 68, 4, 0, 55, 69 ], 
          [ 70, 0, 0, 5, 42, 53 ], [ 0, 71, 0, 0, 55, 56 ], 
          [ 72, 73, 0, 39, 0, 48 ], [ 0, 0, 74, 0, 6, 7 ], 
          [ 0, 0, 0, 75, 6, 7 ], [ 0, 0, 14, 15, 60, 0 ], 
          [ 8, 9, 43, 0, 63, 45 ], [ 76, 77, 0, 0, 50, 0 ], 
          [ 78, 79, 80, 0, 0, 45 ], [ 10, 11, 0, 46, 47, 51 ], 
          [ 81, 82, 0, 83, 47, 0 ], [ 84, 85, 0, 0, 0, 65 ], 
          [ 8, 9, 49, 0, 6, 45 ], [ 86, 87, 14, 0, 50, 0 ], 
          [ 78, 79, 18, 0, 0, 7 ], [ 52, 0, 40, 0, 67, 53 ], 
          [ 88, 0, 18, 19, 0, 53 ], [ 0, 54, 4, 0, 55, 62 ], 
          [ 0, 89, 14, 15, 55, 0 ], [ 0, 0, 18, 19, 0, 69 ], 
          [ 90, 0, 0, 0, 60, 53 ], [ 0, 58, 4, 0, 6, 62 ], 
          [ 59, 0, 0, 5, 6, 53 ], [ 12, 0, 14, 15, 60, 0 ], 
          [ 0, 61, 0, 41, 6, 62 ], [ 16, 0, 18, 19, 0, 7 ], 
          [ 81, 82, 0, 15, 6, 0 ], [ 10, 11, 0, 64, 47, 7 ], 
          [ 91, 92, 0, 19, 0, 65 ], [ 66, 0, 40, 0, 67, 7 ], 
          [ 0, 13, 14, 15, 6, 0 ], [ 0, 68, 4, 0, 55, 7 ], 
          [ 0, 17, 18, 19, 0, 69 ], [ 70, 0, 0, 5, 67, 53 ], 
          [ 0, 71, 0, 41, 55, 62 ], [ 72, 0, 0, 5, 67, 7 ], 
          [ 0, 93, 0, 0, 55, 69 ], [ 8, 0, 74, 0, 6, 7 ], 
          [ 0, 11, 0, 75, 6, 7 ], [ 94, 0, 95, 96, 0, 0 ], 
          [ 0, 97, 98, 99, 6, 0 ], [ 100, 0, 101, 102, 0, 7 ], 
          [ 0, 103, 23, 104, 0, 0 ], [ 35, 36, 80, 0, 0, 45 ], 
          [ 105, 0, 106, 24, 0, 0 ], [ 0, 107, 98, 108, 6, 0 ], 
          [ 30, 31, 0, 83, 47, 0 ], [ 109, 0, 110, 102, 0, 7 ], 
          [ 0, 111, 112, 113, 0, 0 ], [ 114, 0, 115, 96, 0, 0 ], 
          [ 0, 87, 25, 116, 6, 0 ], [ 88, 0, 32, 33, 0, 53 ], 
          [ 0, 89, 25, 26, 55, 0 ], [ 90, 0, 40, 0, 6, 53 ], 
          [ 91, 0, 117, 33, 0, 7 ], [ 0, 118, 112, 119, 0, 0 ], 
          [ 0, 93, 0, 41, 55, 7 ], [ 94, 0, 120, 121, 42, 0 ], 
          [ 0, 0, 122, 0, 44, 45 ], [ 123, 0, 0, 124, 47, 48 ], 
          [ 0, 97, 98, 116, 6, 0 ], [ 0, 125, 126, 0, 50, 45 ], 
          [ 0, 0, 0, 108, 6, 51 ], [ 100, 0, 32, 102, 0, 7 ], 
          [ 8, 0, 101, 0, 63, 7 ], [ 123, 0, 0, 127, 47, 65 ], 
          [ 0, 103, 32, 128, 0, 56 ], [ 10, 0, 0, 46, 47, 48 ], 
          [ 105, 0, 120, 26, 42, 0 ], [ 0, 9, 43, 0, 44, 45 ], 
          [ 0, 107, 98, 26, 6, 0 ], [ 0, 11, 0, 108, 6, 51 ], 
          [ 109, 0, 117, 102, 0, 7 ], [ 0, 0, 101, 0, 63, 7 ], 
          [ 0, 111, 129, 128, 0, 56 ], [ 0, 125, 130, 0, 44, 45 ], 
          [ 0, 0, 0, 131, 47, 48 ], [ 114, 0, 25, 121, 42, 0 ], 
          [ 8, 0, 122, 0, 44, 45 ], [ 10, 0, 0, 26, 6, 51 ], 
          [ 0, 9, 32, 0, 63, 7 ], [ 0, 118, 129, 33, 0, 56 ], 
          [ 0, 11, 0, 131, 47, 48 ], [ 0, 9, 49, 0, 50, 45 ], 
          [ 123, 0, 0, 121, 6, 51 ], [ 8, 0, 122, 0, 63, 45 ], 
          [ 123, 0, 0, 123, 6, 7 ], [ 123, 0, 0, 124, 47, 51 ], 
          [ 0, 125, 125, 0, 6, 7 ], [ 0, 125, 126, 0, 6, 45 ], 
          [ 123, 0, 0, 127, 47, 7 ], [ 10, 0, 0, 64, 47, 65 ], 
          [ 0, 125, 129, 0, 63, 7 ], [ 0, 125, 130, 0, 63, 45 ], 
          [ 0, 11, 0, 131, 47, 51 ] ] ) )
gap> LogTo();
